//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_app/controller/InputActionTest.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MyInputActionTest: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MyInputActionTest()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionTest"",
    ""maps"": [
        {
            ""name"": ""fpsGameplay"",
            ""id"": ""7fc6e370-7b4e-43aa-a721-15d327066bf0"",
            ""actions"": [
                {
                    ""name"": ""fire"",
                    ""type"": ""Button"",
                    ""id"": ""668f6705-67fe-4080-90d1-cb6a064fd315"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""37d0802e-b6d6-4e8b-9e8c-7c8db74f7557"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and keyboard"",
                    ""action"": ""fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e960bca3-7ab3-41e0-9ab8-2f401eff8f55"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and keyboard"",
                    ""action"": ""fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse and keyboard"",
            ""bindingGroup"": ""Mouse and keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // fpsGameplay
        m_fpsGameplay = asset.FindActionMap("fpsGameplay", throwIfNotFound: true);
        m_fpsGameplay_fire = m_fpsGameplay.FindAction("fire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // fpsGameplay
    private readonly InputActionMap m_fpsGameplay;
    private List<IFpsGameplayActions> m_FpsGameplayActionsCallbackInterfaces = new List<IFpsGameplayActions>();
    private readonly InputAction m_fpsGameplay_fire;
    public struct FpsGameplayActions
    {
        private @MyInputActionTest m_Wrapper;
        public FpsGameplayActions(@MyInputActionTest wrapper) { m_Wrapper = wrapper; }
        public InputAction @fire => m_Wrapper.m_fpsGameplay_fire;
        public InputActionMap Get() { return m_Wrapper.m_fpsGameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FpsGameplayActions set) { return set.Get(); }
        public void AddCallbacks(IFpsGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_FpsGameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FpsGameplayActionsCallbackInterfaces.Add(instance);
            @fire.started += instance.OnFire;
            @fire.performed += instance.OnFire;
            @fire.canceled += instance.OnFire;
        }

        private void UnregisterCallbacks(IFpsGameplayActions instance)
        {
            @fire.started -= instance.OnFire;
            @fire.performed -= instance.OnFire;
            @fire.canceled -= instance.OnFire;
        }

        public void RemoveCallbacks(IFpsGameplayActions instance)
        {
            if (m_Wrapper.m_FpsGameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFpsGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_FpsGameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FpsGameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FpsGameplayActions @fpsGameplay => new FpsGameplayActions(this);
    private int m_MouseandkeyboardSchemeIndex = -1;
    public InputControlScheme MouseandkeyboardScheme
    {
        get
        {
            if (m_MouseandkeyboardSchemeIndex == -1) m_MouseandkeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse and keyboard");
            return asset.controlSchemes[m_MouseandkeyboardSchemeIndex];
        }
    }
    public interface IFpsGameplayActions
    {
        void OnFire(InputAction.CallbackContext context);
    }
}
